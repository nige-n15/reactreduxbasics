{"ast":null,"code":"import { formValues } from 'redux-form';\nimport streams from '../apis/streams';\nimport history from '../history';\nimport { CREATE_STREAM, SIGN_IN, SIGN_OUT, EDIT_STREAM, DELETE_STREAM, FETCH_STREAM, FETCH_STREAMS } from './types';\nexport const signIn = userId => {\n  return {\n    type: SIGN_IN,\n    payload: userId\n  };\n};\nexport const signOut = () => {\n  return {\n    type: SIGN_OUT\n  };\n};\nexport const createStream = formValues => async (dispatch, getState) => {\n  const {\n    userId\n  } = getState().auth;\n  const response = await streams.post('/streams', { ...formValues,\n    userId\n  });\n  dispatch({\n    type: CREATE_STREAM,\n    payload: response.data\n  }); //Navigate user back to root route\n\n  history.push('/');\n};\nexport const fetchStreams = () => async dispatch => {\n  const response = await streams.get('/streams');\n  dispatch({\n    type: FETCH_STREAMS,\n    payload: response.data\n  });\n};\nexport const fetchStream = id => async dispatch => {\n  const response = await streams.get(`/streams/${id}`);\n  dispatch({\n    type: FETCH_STREAM,\n    payload: response.data\n  });\n};\nexport const editStream = (id, formValues) => async dispatch => {\n  const response = await streams.patch(`/streams/${id}`, formValues);\n  const editedStream = { ...response.data\n  };\n  dispatch({\n    type: EDIT_STREAM,\n    payload: response.data\n  });\n  history.push('/');\n};\nexport const deleteStream = id => async dispatch => {\n  await streams.delete(`/streams/${id}`);\n  dispatch({\n    type: DELETE_STREAM,\n    payload: id\n  });\n  history.push('/');\n};","map":{"version":3,"sources":["/home/n1g3/Projects/streams/client/src/actions/index.js"],"names":["formValues","streams","history","CREATE_STREAM","SIGN_IN","SIGN_OUT","EDIT_STREAM","DELETE_STREAM","FETCH_STREAM","FETCH_STREAMS","signIn","userId","type","payload","signOut","createStream","dispatch","getState","auth","response","post","data","push","fetchStreams","get","fetchStream","id","editStream","patch","editedStream","deleteStream","delete"],"mappings":"AAAA,SAASA,UAAT,QAA2B,YAA3B;AACA,OAAOC,OAAP,MAAoB,iBAApB;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,SAASC,aAAT,EAAwBC,OAAxB,EAAiCC,QAAjC,EAA2CC,WAA3C,EAAwDC,aAAxD,EAAuEC,YAAvE,EAAqFC,aAArF,QAAyG,SAAzG;AAEA,OAAO,MAAMC,MAAM,GAAGC,MAAM,IAAI;AAC5B,SAAO;AACHC,IAAAA,IAAI,EAAER,OADH;AAEHS,IAAAA,OAAO,EAAEF;AAFN,GAAP;AAIH,CALM;AAOP,OAAO,MAAMG,OAAO,GAAG,MAAM;AACzB,SAAO;AACHF,IAAAA,IAAI,EAAEP;AADH,GAAP;AAGH,CAJM;AAMP,OAAO,MAAMU,YAAY,GAAGf,UAAU,IAAI,OAAOgB,QAAP,EAAiBC,QAAjB,KAA8B;AACpE,QAAM;AAAEN,IAAAA;AAAF,MAAaM,QAAQ,GAAGC,IAA9B;AACA,QAAMC,QAAQ,GAAG,MAAMlB,OAAO,CAACmB,IAAR,CAAa,UAAb,EAAwB,EAAC,GAAGpB,UAAJ;AAAgBW,IAAAA;AAAhB,GAAxB,CAAvB;AAEAK,EAAAA,QAAQ,CAAC;AAACJ,IAAAA,IAAI,EAAET,aAAP;AAAsBU,IAAAA,OAAO,EAAEM,QAAQ,CAACE;AAAxC,GAAD,CAAR,CAJoE,CAKpE;;AACAnB,EAAAA,OAAO,CAACoB,IAAR,CAAa,GAAb;AACH,CAPM;AASP,OAAO,MAAMC,YAAY,GAAG,MAAM,MAAMP,QAAN,IAAkB;AAChD,QAAMG,QAAQ,GAAG,MAAMlB,OAAO,CAACuB,GAAR,CAAY,UAAZ,CAAvB;AACAR,EAAAA,QAAQ,CAAC;AAACJ,IAAAA,IAAI,EAAEH,aAAP;AAAsBI,IAAAA,OAAO,EAAEM,QAAQ,CAACE;AAAxC,GAAD,CAAR;AACH,CAHM;AAKP,OAAO,MAAMI,WAAW,GAAGC,EAAE,IAAI,MAAMV,QAAN,IAAkB;AAC/C,QAAMG,QAAQ,GAAG,MAAMlB,OAAO,CAACuB,GAAR,CAAa,YAAWE,EAAG,EAA3B,CAAvB;AACAV,EAAAA,QAAQ,CAAC;AAACJ,IAAAA,IAAI,EAAEJ,YAAP;AAAqBK,IAAAA,OAAO,EAAEM,QAAQ,CAACE;AAAvC,GAAD,CAAR;AACH,CAHM;AAKP,OAAO,MAAMM,UAAU,GAAG,CAACD,EAAD,EAAK1B,UAAL,KAAoB,MAAMgB,QAAN,IAAkB;AAC5D,QAAMG,QAAQ,GAAG,MAAMlB,OAAO,CAAC2B,KAAR,CAAe,YAAWF,EAAG,EAA7B,EAAgC1B,UAAhC,CAAvB;AACA,QAAM6B,YAAY,GAAG,EAAE,GAAGV,QAAQ,CAACE;AAAd,GAArB;AACAL,EAAAA,QAAQ,CAAC;AAACJ,IAAAA,IAAI,EAAEN,WAAP;AAAoBO,IAAAA,OAAO,EAAEM,QAAQ,CAACE;AAAtC,GAAD,CAAR;AACAnB,EAAAA,OAAO,CAACoB,IAAR,CAAa,GAAb;AACH,CALM;AAOP,OAAO,MAAMQ,YAAY,GAAGJ,EAAE,IAAI,MAAMV,QAAN,IAAkB;AAChD,QAAMf,OAAO,CAAC8B,MAAR,CAAgB,YAAWL,EAAG,EAA9B,CAAN;AACAV,EAAAA,QAAQ,CAAC;AAACJ,IAAAA,IAAI,EAAEL,aAAP;AAAsBM,IAAAA,OAAO,EAAEa;AAA/B,GAAD,CAAR;AACAxB,EAAAA,OAAO,CAACoB,IAAR,CAAa,GAAb;AACH,CAJM","sourcesContent":["import { formValues } from 'redux-form';\nimport streams from '../apis/streams';\nimport history from '../history';\nimport { CREATE_STREAM, SIGN_IN, SIGN_OUT, EDIT_STREAM, DELETE_STREAM, FETCH_STREAM, FETCH_STREAMS} from './types';\n\nexport const signIn = userId => {\n    return {\n        type: SIGN_IN,\n        payload: userId\n    };\n};\n\nexport const signOut = () => {\n    return {\n        type: SIGN_OUT\n    };\n};\n\nexport const createStream = formValues => async (dispatch, getState) => {\n    const { userId } = getState().auth;\n    const response = await streams.post('/streams',{...formValues, userId });\n\n    dispatch({type: CREATE_STREAM, payload: response.data });\n    //Navigate user back to root route\n    history.push('/');\n};\n\nexport const fetchStreams = () => async dispatch => {\n    const response = await streams.get('/streams');\n    dispatch({type: FETCH_STREAMS, payload: response.data });\n};\n\nexport const fetchStream = id => async dispatch => {\n    const response = await streams.get(`/streams/${id}`);\n    dispatch({type: FETCH_STREAM, payload: response.data });\n};\n\nexport const editStream = (id, formValues) => async dispatch => {\n    const response = await streams.patch(`/streams/${id}`, formValues);\n    const editedStream = { ...response.data,}\n    dispatch({type: EDIT_STREAM, payload: response.data });\n    history.push('/');\n};\n\nexport const deleteStream = id => async dispatch => {\n    await streams.delete(`/streams/${id}`);\n    dispatch({type: DELETE_STREAM, payload: id});\n    history.push('/');\n};"]},"metadata":{},"sourceType":"module"}